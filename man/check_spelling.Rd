% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_spelling.R
\name{check_spelling}
\alias{check_spelling}
\title{Spell checking}
\usage{
check_spelling(filename, pre_release = TRUE, ignore.lines = NULL,
  known.correct = NULL, known.correct.fixed = NULL,
  known.wrong = NULL, ignore_spelling_in = NULL,
  ignore_spelling_in_nth = NULL, bib_files, check_etcs = TRUE,
  dict_lang = "en_GB", rstudio = FALSE, .report_error)
}
\arguments{
\item{filename}{Path to a LaTeX file to check.}

\item{pre_release}{Should the document be assumed to be final?
Setting to \code{FALSE} permits the use of \code{ignore_spelling_in} and permits 
\code{add_to_dictionary} to be
present outside the document preamble.}

\item{ignore.lines}{Integer vector of lines to ignore (due to possibly spurious errors).}

\item{known.correct}{Character vector of patterns known to be correct (which will never be raised
by this function).}

\item{known.correct.fixed}{Character vector of words known to be correct (which will never be 
raised by this function).}

\item{known.wrong}{Character vector of patterns known to be wrong.}

\item{ignore_spelling_in}{Command whose first mandatory argument will be ignored.}

\item{ignore_spelling_in_nth}{Named list of arguments to ignore; names are the commands to be ignored, values are the \code{n}th argument to be ignored.}

\item{bib_files}{Bibliography files (containing possible clues to misspellings). If supplied, and
this function would otherwise throw an error, the \code{.bib} files are read and any author 
names that match the misspelled words are added to the dictionary.}

\item{check_etcs}{If \code{TRUE}, stop if any variations of \code{etc}, \code{ie}, and \code{eg}
are present. (If they are typed literally, they may be formatted inconsistently. Using a macro
ensures they appear consistently.)}

\item{dict_lang}{Passed to \code{hunspell::dictionary}.}

\item{rstudio}{Use the RStudio API?}

\item{.report_error}{A function to provide context to any errors. If missing, defaults to 
\code{\link{report2console}}.}
}
\value{
Called primarily for its side-effect. If the spell check fails, the line at which the 
first error was detected, with an error message. If the check succeeds, \code{NULL} invisibly.
}
\description{
Spell checking
}
\details{
Extends and enhances \code{hunspell}:

 \itemize{
\item{You can add directives 
in the document itself. To add a word \code{foobaz} to the dictionary (so its presence does not
 throw an error), write \code{\% add_to_dictionary: foobaz} on a single line. The advantage of 
 this method is that you can collaborate on the document without having to keep track of which
 spelling errors are genuine.}
\item{The 
directive \code{\% ignore_spelling_in: mycmd} which will ignore the spelling of words within the first argument
of \code{\\mycmd}.}
\item{\code{ignore_spelling_in_file: <file.tex>} will skip the check of \code{<file.tex>} if it 
is \code{input} or \code{include} in \code{filename}, as well as any files within it. Should 
appear as it is within \code{input} but with the file extension}

\item{Only the root document need be supplied; 
any files that are fed via \code{\\input} or \code{\\include} are checked (recursively).}

\item{A historical advantages was that the contents of certain commands were not checked, the spelling of which need not be checked 
as they are not printed, \code{viz.} citation and cross-reference commands, and certain optional
arguments. Most of these
are now parsed correctly by \code{\link[hunspell]{hunspell}}, though some still need to be 
supplied (including, naturally, user-supplied macros).}
\item{Abbreviations and initialisms which are validly introduced will not throw errors. See
\code{\link{extract_valid_abbrevations}}.}
\item{Words preceded by '[sic]' will not throw errors.}
}

The package comes with a suite of \code{\link{correctly_spelled_words}} that were not present in \code{hunspell}'s 
dictionary. 

This function should be quite fast, but slower than \code{hunspell::hunspell} (which it invokes). 
I aim for less than 500 ms on a real-world report of around 100 pages.
The function is slower when it needs to consult \code{bib_files}, though I recommend adding authors, titles, etc. 
to the dictionary
explicitly, or using \code{citeauthor} and friends. 

This function is forked from \url{https://github.com/hughparsonage/grattanReporter} to parse reports of the Grattan Institute, Melbourne for errors. See
\url{https://github.com/HughParsonage/grattex/blob/master/doc/grattexDocumentation.pdf} for the full spec.
Some checks that package performs have been omitted in this package.
}
\examples{

\dontrun{
url_bib <- 
paste0("https://raw.githubusercontent.com/HughParsonage/",
       "grattex/e6cab97145d38890e44e83d122e995e3b8936fc6/",
       "Report.tex")
check_spelling(url_bib)
}

}
